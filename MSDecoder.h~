/*
 * Created by Carlos - 07/09/2020
 */

#ifndef MSDECODER_H
#define MSDECODER_H

#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/kruskal_min_spanning_tree.hpp>
//#include <boost/property_map/property_map.hpp>
//#include <boost/graph/graph_traits.hpp>
//#include <boost/config.hpp>

#include <vector>
#include <algorithm>
#include <iostream>
#include <fstream>

#ifdef BOOST_MSVC
#  pragma warning(disable: 4267)
#endif

struct Edge {
Edge(int dest, int del, int jit) : j(dest), delay(del), jitter(jit) {}
  // Destine vertex, delay and jitter of the edge
  int j, delay, jitter;
};

using namespace boost;
using namespace std;

class MSDecoder {
  typedef adjacency_list< vecS, vecS, directedS, no_property, property < edge_weight_t, double > >  BoostGraph;

public:
  typedef graph_traits<BoostGraph>::edge_descriptor EdgeDescriptor;
  typedef graph_traits<BoostGraph>::vertex_descriptor VertexDescriptor;

  property_map < BoostGraph, edge_weight_t >::type weightmap;
  int n, m, root, paramDelay, paramJitter, paramVariation, paramBandwidth;
  BoostGraph graph;
  vector<vector<Edge>> edges;
  vector<vector<pair<int, int>>> costs;
  vector<int> terminals = vector<int>();
  vector<int> nonTerminals = vector<int>();
  vector<int> DuS = vector<int>();
  vector<bool> removed;
 
  MSDecoder();
  
  ~MSDecoder();

  void loadInstance(string instance, string param);

  int getN() const;

  int getM() const;

  double decode(const std::vector<double>& chromosome) const;
  
};

#endif
